#!/bin/bash

# Create a new directory and enter it
function mk() {
  mkdir -p "$@" && cd "$@" || return
}


# GIT Functions
gopen() {
  git remote -v | head -n 1 | awk -F "@" '{print $2}' | awk -F " " '{print $1}' | sed 's/:/\//g' | sed 's/.git//g' | awk '{print "https://"$1}' | xargs open "$@";
}

gpr() {
  if [[ "$1" == "" ]]; then
   echo "gpr: usage: open or create";
  elif [[ "$1" == "create" ]]; then
   gh pr create --fill
  elif [[ "$1" == "open" ]]; then
    gh pr view --web
  else
    echo "gpr: unknown command";
  fi;
}

new_branch() {
  if [[ "$1" == "" ]]; then
   echo "usage: new_branch <branch_name>";
   return;
  elif [[ "$(git branch | grep -E "$1")" != "" ]]; then
    echo "$1 already exists locally";
    return;
  fi;

  main=$(git branch | grep -E 'main|master' | sed -r 's/[ ]+//')

  git fetch origin
  git checkout $main
  git pull origin $main
  git checkout -b "$1"
  git push -u origin "$1"
}

cleanup_branches() {
  # Check for search term
  search_term="$1"
  if [[ "$1" == "" ]]; then
      search_term="."
  fi

  # Get the name of the main and current branches
  main=$(git branch | grep -E 'main|master' | sed -r 's/[ ]+//')
  current=$(git branch | grep '\*' | sed 's/ //;s/*//')

  branches="$(git branch | sed "s/*//;s/$main//" | grep -E "$search_term" | xargs)"
  for b in $branches; do
      read -p "Delete branch \"$b\" (y/n)?" -n 1 -r; echo
      if [[ ! $REPLY =~ ^[Nn]$ ]]; then
          # Confirm before deleting the current branch
          if [[ "$b" == "$current" ]]; then
              read -p "Are you sure you want to delete the current branch (y/n)? " -n 1 -r; echo
              if [[ $REPLY =~ ^[Nn]$ ]]; then continue; fi
          fi

          # Delete the branch
          echo "  Deleting $b . . ."
          result=$(git branch -d $b)
          echo -e "  ---> $result\n"
      fi
  done
}

# MISC Functions
backupToUsb() {
  local directory, machine
  directory="/Volumes/BACKUPUSB"
  machine=$(uname)

  if [ -d "$directory" ]; then
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/"$machine"-Documents.tar.gz "$HOME"/Documents
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/"$machine"-Projects.tar.gz "$HOME"/Projects
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/"$machine"-Downloads.tar.gz "$HOME"/Downloads
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/"$machine"-Work.tar.gz "$HOME"/Work
  else
    echo "$directory not found"
  fi
}

hello() {
  # hello does a loop and says a default saying infinitely or a custom saying
  SAYTHIS="A robot may not injure a human being or, through inaction, allow a human being to come to harm; A robot must obey the orders given it by human beings except where such orders would conflict with the First Law; A robot must protect its own existence as long as such protection does not conflict with the First or Second Law The Zeroth Law: A robot may not harm humanity, or, by inaction, allow humanity to come to harm. "
  if [[ $1 ]]; then
    SAYTHIS=$1
  fi
  for((;;)) do say "$SAYTHIS"; done
}

kat() { cat "$@" | lolcat; }
