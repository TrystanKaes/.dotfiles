#!/bin/bash


### BEGIN I HATE PYTHON
# I hate pythons environment management.
# Here is a dumb CLI to make me less sad.
function ihp(){
  if [[ "$1" == "init" ]]; then
     [ ! -d .ihp ] && python3 -m venv .ihp || echo "ihp already initialized";
  elif [[ "$1" == "kill" ]]; then
     [ -d .ihp ] && rm -rf .ihp || echo "ihp not initialized";
  elif [[ "$1" == "bam" ]]; then
    [ ! -d .ihp ] && ihp init;
    ihp start;
    pip install -r requirements.txt;
  elif [[ "$1" == "start" ]]; then
    [ -d .ihp ] && source .ihp/bin/activate && ihp which || echo "ihp not initialized";
  elif [[ "$1" == "stop" ]]; then
    [ -d .ihp ] && deactivate > /dev/null 2>&1
    ihp which
  elif [[ "$1" == "which" ]]; then
    [ -d .ihp ] && which python || which python3;
  else
    echo "Welcome to \"I Hate Python\""
    echo ""
    echo " usage: ihp <init|kill|start|stop|which|bam>"
    echo ""
    echo "  'init' - initialize the ihp environment"
    echo "  'kill' - kill the ihp environment"
    echo "  'start' - start the ihp environment"
    echo "  'stop' - stop the ihp environment"
    echo "  'which' - show the current python"
    echo "  'bam' - init, start, and then install requirements.txt"
    echo ""
  fi
}
### END I HATE PYTHON

# Create a new directory and enter it
function mk() {
  mkdir -p "$@" && cd "$@" || return
}

# GIT Functions
gopen() {
  git remote -v | head -n 1 | awk -F "@" '{print $2}' | awk -F " " '{print $1}' | sed 's/:/\//g' | sed 's/.git//g' | awk '{print "https://"$1}' | xargs open "$@"
}

gpr() {
  if [[ "$1" == "" ]]; then
    echo "gpr: usage: open or create"
  elif [[ "$1" == "create" ]]; then
    gh pr create --fill
  elif [[ "$1" == "open" ]]; then
    gh pr view --web
  else
    echo "gpr: unknown command"
  fi
}

# call by output
get_primary_branch_name() {
  if [[ $# != 1 ]]; then
    return
  fi

  result=$(git branch | grep -E 'main|master|continuous' | sed -r 's/[ ]+//;s/\*//')

  # shellcheck disable=SC2206
  list=(${result//$' '/ })

  if [[ ${#list[@]} == 2 ]]; then
    echo -e "Warning: found both \"${list[0]}\" and \"${list[1]}\" branches present"
    echo -e "     ==> assuming \"${list[0]}\" is the primary branch"
  fi

  eval "${1}=${list[0]}"
}

new_branch() {
  if [[ "$1" == "" ]]; then
    echo "usage: new_branch <branch_name>"
    return
  elif [[ "$(git branch | grep -E "$1")" != "" ]]; then
    echo "$1 already exists locally"
    return
  fi

  primary=''
  get_primary_branch_name primary

  git fetch origin
  git checkout "$primary"
  git pull origin "$primary"
  git checkout -b "$1"
  git push -u origin "$1"
}

cleanup_branches() {
  # Check for search term
  search_term="$1"
  if [[ "$1" == "" ]]; then
    search_term="."
  fi

  # Get the name of the main and current branches
  primary=''
  get_primary_branch_name primary
  current=$(git branch | grep '\*' | sed -r 's/[ ]+//;s/\*//')

  branches="$(git branch | sed "s/\*//;s/$primary//" | grep -E "$search_term" | xargs)"

  echo "$primary:$current:$branches"
  for b in $branches; do
    read -p "Delete branch \"$b\" (y/n)?" -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      # Confirm before deleting the current branch
      if [[ "$b" == "$current" ]]; then
        read -p "Are you sure you want to delete the current branch (y/n)? " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
          continue
        fi

        git checkout "$primary"
      fi

      # Delete the branch
      echo "  Deleting $b . . ."

      result=$(git branch -d "$b" 2>&1)

      # Check for error and format as needed
      if [[ "$(grep -E "error.*$" <<<"$result")" != "" ]]; then
        result=$(grep -E "error.*$" <<<"$result")
      fi

      echo -e "  ---> $result"
    fi
  done
}

bpr() {
  branch_name=$(git branch | grep -E "\*\s(.*)$" | sed -r 's/[ ]+//;s/\*//')
  pr_url=$(git remote -v | head -n 1 | awk -F "@" '{print $2}' | awk -F " " '{print $1}' | sed 's/:/\//g' | sed 's/.git//g' | awk '{print "https://"$1}')
  open "$pr_url/pull-requests/new?source=$branch_name&t=1"
}

# MISC Functions
backupToUsb() {
  local directory, machine
  directory="/Volumes/BACKUPUSB"
  machine=$(uname)

  if [ -d "$directory" ]; then
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/"$machine"-Documents.tar.gz "$HOME"/Documents
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/"$machine"-Projects.tar.gz "$HOME"/Projects
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/"$machine"-Downloads.tar.gz "$HOME"/Downloads
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/"$machine"-Work.tar.gz "$HOME"/Work
  else
    echo "$directory not found"
  fi
}

hello() {
  # hello does a loop and says a default saying infinitely or a custom saying
  SAYTHIS="A robot may not injure a human being or, through inaction, allow a human being to come to harm; A robot must obey the orders given it by human beings except where such orders would conflict with the First Law; A robot must protect its own existence as long as such protection does not conflict with the First or Second Law The Zeroth Law: A robot may not harm humanity, or, by inaction, allow humanity to come to harm. "
  if [[ $1 ]]; then
    SAYTHIS=$1
  fi
  for (( ; ; )); do say "$SAYTHIS"; done
}

# ------------------ BEGIN: ALIAS OVERRIDE HELPERS ------------------
# Overrides for npm and npx
function override_warning() {
  cmd="$1"
  bypass="$2"
  warningMsg="***********************************************"
  warningMsg+="\n\t OVERRIDE: using \"${cmd}\" instead "
  warningMsg+="\n***********************************************"
  warningMsg+="\nUse \"${bypass}\" to clear this override.\n"

  echo -e "$warningMsg"
  return 0
}


# helpers
override_alias() {
  # Usage: override_alias <name> [target]
  # Unalias <name> and create a function <name> that calls <target> (defaults to <name>)
  local name target
  name="$1"
  target="${2:-$1}"

  # Remove alias if it exists
  if alias "$name" >/dev/null 2>&1; then
    unalias "$name"
  fi

  # Create a function with the same name, calling the real command
  eval "${name}() { command ${target} \"\$@\"; }"
}
# ------------------ END: ALIAS OVERRIDE HELPERS ------------------

# XXX: (Maybe temporary) Fix to get around the fact that VSCode-based editors can't be codesigned
code () {
    /usr/local/bin/code "$@" 2> \
    >(grep -F -v 'SecCodeCheckValidity: Error Domain=NSOSStatusErrorDomain' >&2)
}
